# Generated by ariadne-codegen
# Source: queries

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .project_v_2_issues import ProjectV2Issues


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def project_v_2_issues(
        self,
        org: str,
        project_number: int,
        cursor: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ProjectV2Issues:
        query = gql(
            """
            query project_v2_issues($org: String!, $projectNumber: Int!, $cursor: String) {
              rateLimit {
                limit
                cost
                remaining
                resetAt
              }
              organization(login: $org) {
                projectV2(number: $projectNumber) {
                  items(first: 50, after: $cursor) {
                    totalCount
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                    nodes {
                      id
                      content {
                        __typename
                        ... on Issue {
                          number
                          title
                          url
                          closed
                          milestone {
                            title
                          }
                        }
                      }
                      fieldValues(first: 99) {
                        nodes {
                          __typename
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            field {
                              __typename
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                            name
                          }
                          ... on ProjectV2ItemFieldTextValue {
                            field {
                              __typename
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                            text
                          }
                          ... on ProjectV2ItemFieldDateValue {
                            field {
                              __typename
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                            date
                          }
                          ... on ProjectV2ItemFieldIterationValue {
                            field {
                              __typename
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                            title
                          }
                          ... on ProjectV2ItemFieldNumberValue {
                            field {
                              __typename
                              ... on ProjectV2FieldCommon {
                                id
                                name
                              }
                            }
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "org": org,
            "projectNumber": project_number,
            "cursor": cursor,
        }
        response = await self.execute(
            query=query,
            operation_name="project_v2_issues",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ProjectV2Issues.model_validate(data)

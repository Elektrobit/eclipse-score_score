# This file is at the root level, as it applies to all Python code,
# not only to docs or to tools.

[tool.pyright]
typeCheckingMode = "standard"
pythonVersion = "3.12" # Keep in sync with MODULE.bazel

exclude = [
    "**/__pycache__",
    "**/.*",
    "bazel-*",
]

[tool.ruff]
target-version = "py312"
extend-exclude = [
    "__pycache__",
    ".*",
    "bazel-*",
]

# Selected rules for clean code, readability, and bug prevention
lint.select = [
    "E",    # pycodestyle (PEP8)
    "F",    # pyflakes (undefined vars, unused imports)
    "I",    # isort (import sorting)
    "B",    # flake8-bugbear (likely bugs)
    "C90",  # mccabe (complexity checks)
    "UP",   # pyupgrade (modern Python 3.12+ features)
    "SIM",  # flake8-simplify (simplifies code patterns)
    "RET"   # flake8-return (consistent return statements)
]

lint.ignore = [
    # Rules we want to ignore go in here.
    # Always provide a comment explaining why.

    # Rule: Unnecessary `else` after `return` statement.
    # It's quite arguable whether this leads to better or worse readability.
    # There is a bunch of articles and topics on the matter, e.g.:
    # * https://www.fluentcpp.com/2018/08/24/how-to-design-early-returns-in-c-based-on-procedural-programming/
    # * https://blog.mozilla.org/nnethercote/2009/08/31/no-else-after-return-considered-harmful/
    "RET505",
]

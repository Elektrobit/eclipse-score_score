..
   # *******************************************************************************
   # Copyright (c) 2024 Contributors to the Eclipse Foundation
   #
   # See the NOTICE file(s) distributed with this work for additional
   # information regarding copyright ownership.
   #
   # This program and the accompanying materials are made available under the
   # terms of the Apache License Version 2.0 which is available at
   # https://www.apache.org/licenses/LICENSE-2.0
   #
   # SPDX-License-Identifier: Apache-2.0
   # *******************************************************************************

Requirements
############

High cohesion and loose coupling
================================

.. feat_req:: Standardized service contract
   :id: FEAT_REQ__ipc__standardized_service_contract
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall provide the means to define service interfaces in a reusable manner.

.. feat_req:: Service reference autonomy
   :id: FEAT_REQ__ipc__service_reference_autonomy
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Service discovery solely requires an identifier to find appropriate services.
   Any deployment information is only supplied in a configuration file read at runtime.
   Note: If deployment information is missing, this may have impact on the service discovery.

.. feat_req:: Service location transparency
   :id: FEAT_REQ__ipc__service_location_transparency
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The interface to access services is agnostic to the binding used to communicate with the service.
   Note: Deployment information may require manual changes based on where the service is located.

.. feat_req:: Service abstraction
   :id: FEAT_REQ__ipc__service_abstraction
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Communication with a service shall only happen via the interface of the service. A communication partner shall
   not require knowledge about internals of the service to interact with it.

.. feat_req:: Service autonomy
   :id: FEAT_REQ__ipc__service_autonomy
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall provide the means to define independent communication interfaces.

.. feat_req:: Service statelessness
   :id: FEAT_REQ__ipc__service_statelessness
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support stateless communication.
   Note:
   - In case of events, the producer is not aware of its consumers.
   - In case of RPC, the skeleton is not aware of the proxy, this request originated from.

.. feat_req:: Service granularity
   :id: FEAT_REQ__ipc__service_granularity
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall allow multiple services per SW component.

.. feat_req:: Service discovery
   :id: FEAT_REQ__ipc__service_discovery
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall provide service discovery to find available services during runtime.
   Note: The service discovery may be restricted/impacted by availability of deployment information.

.. feat_req:: Service interface elements
   :id: FEAT_REQ__ipc__service_interface_elements
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2,STKH_REQ__282,STKH_REQ__283
   :status: valid

   A service interface consists of a combination of any number of the following elements:
   - Events
   - Methods

.. feat_req:: Event
   :id: FEAT_REQ__ipc__event
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2,STKH_REQ__282
   :status: valid

   An event in a service interface is an element that has:

   - a name
   - a type

   The service offering the event can assign a value to it.
   Consumers can subscribe to changes to the value of the element or poll unseen, cached values.

.. feat_req:: Method
   :id: FEAT_REQ__ipc__method
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2,STKH_REQ__283
   :status: valid

   A method in a service interface is an element that has:

   - a name
   - a specified application routine with a given set of parameters and a return type

   When a communication partner issues a call to the method with the required parameters:

   1. it shall invoke the application routine with the provided parameters, and
   2. return its result to the communication partner

   A method call shall be possible both synchronously and asynchronously.

.. feat_req:: Producer-Consumer Pattern
   :id: FEAT_REQ__ipc__producer_consumer
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__2,STKH_REQ__281
   :status: valid

   Communication shall be cached based on the producer-consumer pattern.

.. feat_req:: Support for Time-based Architecture
   :id: FEAT_REQ__ipc__time_based_arch
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2,STKH_REQ__281
   :status: valid

   The communication framework shall provide API to support a time-based architecture.

.. feat_req:: Support for Data-driven Architecture
   :id: FEAT_REQ__ipc__data_driven_arch
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2,STKH_REQ__282
   :status: valid

   The communication framework shall provide API to support a data-driven architecture.

.. feat_req:: Support for Request-driven Architecture
   :id: FEAT_REQ__ipc__request_driven_arch
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2,STKH_REQ__282
   :status: valid

   The communication framework shall provide API to support a request-driven architecture.

Mixed-Criticality safety systems
================================

.. feat_req:: Safe communication over criticality levels
   :id: FEAT_REQ__ipc__safe_communication
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support safe communication involving communication partners on the same or multiple
   criticality levels.

.. feat_req:: Data Corruption
   :id: FEAT_REQ__ipc__data_corruption
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Consumers with lower criticality shall not be able to corrupt data consumed by partners with higher criticality.

.. feat_req:: Data Reordering
   :id: FEAT_REQ__ipc__data_reordering
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Consumers with lower criticality shall not be able to modify the order of data consumed by partners with higher
   criticality.

.. feat_req:: Data Repetition
   :id: FEAT_REQ__ipc__data_repetition
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Consumers with lower criticality shall not be able to duplicate data consumed by other communication partners with
   higher criticality.

.. feat_req:: Data Loss
   :id: FEAT_REQ__ipc__data_loss
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Consumers with lower criticality shall not be able to drop data before it is consumed by partners with higher
   criticality.

Performance
===========

.. feat_req:: Zero-Copy IPC
   :id: FEAT_REQ__ipc__zero_copy
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2,STKH_REQ__282
   :status: valid

   IPC communication shall be possible without copying to be transferred data.

User friendly API for information exchange
==========================================

.. feat_req:: Support for multiple programming languages
   :id: FEAT_REQ__ipc__multi_lang
   :reqtype: Non-Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__260
   :status: valid

   The communication framework shall provide a public API for each supported programming language of SCORE.

.. feat_req:: Support for programming language idioms
   :id: FEAT_REQ__ipc__lang_idioms
   :reqtype: Non-Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__260
   :status: valid

   Each public API shall support the idioms of the programming language it is written in.

.. feat_req:: Use programming language infrastructure
   :id: FEAT_REQ__ipc__lang_infra
   :reqtype: Non-Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__260
   :status: valid

   Each public API shall use core infrastructure of its programming language and accompanying standard libraries,
   whenever possible and meaningful.

Full testability for the user facing API
========================================

.. feat_req:: Fully mockable public API
   :id: FEAT_REQ__ipc__testability_mock_api
   :reqtype: Non-Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2
   :status: valid

   The public API shall be fully mockable.

.. feat_req:: Fake binding
   :id: FEAT_REQ__ipc__testability_fake_binding
   :reqtype: Non-Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall provide a fake binding.

Multi-binding support
=====================

.. feat_req:: Multi-binding support
   :id: FEAT_REQ__ipc__multi_binding_support
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support multiple bindings.

.. feat_req:: Binding-agnostic public API
   :id: FEAT_REQ__ipc__binding_agnostic_api
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2
   :status: valid

   The public API of the communication framework shall be binding-agnostic.

.. feat_req:: Multi-binding deployment configuration
   :id: FEAT_REQ__ipc__multi_binding_depl
   :reqtype: Functional
   :security: NO
   :safety: QM
   :satisfies: STKH_REQ__2
   :status: valid

   The association of a service instance and the appropriate binding shall be specified in the deployment configuration.

Dynamic deployment at runtime
=============================

.. feat_req:: Deployment configuration at runtime
   :id: FEAT_REQ__ipc__depl_config_runtime
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   Deployment configuration shall be read from a configuration file at runtime.

Tracing
=======

.. feat_req:: Support for Tracing
   :id: FEAT_REQ__ipc__tracing
   :reqtype: Functional
   :security: NO
   :safety: ASIL_B
   :satisfies: STKH_REQ__242
   :status: valid

   The communication framework shall provide infrastructure to enable binding-agnostic zero-copy tracing of
   communication.

Security Impact
===============

.. feat_req:: Access Control List Placement
   :id: FEAT_REQ__ipc__acl_placement
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support an Access Control Lists in the deployment configuration.

.. feat_req:: Access Control List per service instance
   :id: FEAT_REQ__ipc__acl_per_service_instance
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support an Access Control List per service instance.

.. feat_req:: Access Control List for producer
   :id: FEAT_REQ__ipc__acl_for_producer
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support an Access Control List for the communication partner offering a service
   instance (producer).
   An entry in the ACL corresponds to an allowed consumer.

.. feat_req:: Access Control List for consumer
   :id: FEAT_REQ__ipc__acl_for_consumer
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support an Access Control List for the communication partner consuming a service
   instance.
   An entry in the ACL corresponds to an allowed producer.

.. feat_req:: IPC Confidentiality
   :id: FEAT_REQ__ipc__confidentiality
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The IPC binding shall ensure confidentiality of its communication.

.. feat_req:: IPC Integrity
   :id: FEAT_REQ__ipc__integrity
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The IPC binding shall ensure integrity of its communication.

.. feat_req:: IPC Availability
   :id: FEAT_REQ__ipc__availability
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The IPC binding shall ensure availability of its communication, so that the availability is independent per
   criticality level.

Safety Impact
=============

.. feat_req:: IPC ASIL level
   :id: FEAT_REQ__ipc__asil
   :reqtype: Functional
   :security: YES
   :safety: ASIL_B
   :satisfies: STKH_REQ__2
   :status: valid

   The communication framework shall support safe communication up to ASIL-B.
